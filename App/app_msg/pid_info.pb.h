/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.1 */

#ifndef PB_PID_INFO_PB_H_INCLUDED
#define PB_PID_INFO_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _PIDInfo {
    float kp;
    float ki;
    float kd;
    float e;
    float x;
    float e_real;
    float x_real;
    bool anti_windup_active;
} PIDInfo;


/* Initializer values for message structs */
#define PIDInfo_init_default                     {0, 0, 0, 0, 0, 0, 0, 0}
#define PIDInfo_init_zero                        {0, 0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define PIDInfo_kp_tag                           1
#define PIDInfo_ki_tag                           2
#define PIDInfo_kd_tag                           3
#define PIDInfo_e_tag                            5
#define PIDInfo_e_real_tag                       7
#define PIDInfo_x_tag                            6
#define PIDInfo_x_real_tag                       8
#define PIDInfo_anti_windup_active_tag           9

/* Struct field encoding specification for nanopb */
#define PIDInfo_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    kp,                1) \
X(a, STATIC,   SINGULAR, FLOAT,    ki,                2) \
X(a, STATIC,   SINGULAR, FLOAT,    kd,                3) \
X(a, STATIC,   SINGULAR, FLOAT,    e,                 5) \
X(a, STATIC,   SINGULAR, FLOAT,    x,                 6) \
X(a, STATIC,   SINGULAR, FLOAT,    e_real,            7) \
X(a, STATIC,   SINGULAR, FLOAT,    x_real,            8) \
X(a, STATIC,   SINGULAR, BOOL,     anti_windup_active,   9)
#define PIDInfo_CALLBACK NULL
#define PIDInfo_DEFAULT NULL

extern const pb_msgdesc_t PIDInfo_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define PIDInfo_fields &PIDInfo_msg

/* Maximum encoded size of messages (where known) */
#define PIDInfo_size                             37

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
